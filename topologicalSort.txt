Question:
This algorithm is only applied on Directed Acycylic Graph. So the aim is to arrange all the nodes of the graph in such
a way that if an edge exists between two nodes u and v. Then always u appears before v. 

Ex: 1 -> 2 <- 3, here the edges are 1 -> 2 and 3 -> 2. 
So, the topological sort will be : (1 3 2) or (3 1 2)
1 appears before 2 and 3 also appears before 2. 3 can either occur before 1 or after.

Solution:
We maintain a stack and a visited array. We initiate a loop and travers the visited array. If we encounter an unvisited
node then se mark it as visited and call dfs on it. In the dfs function if any of the neighbours of the node is also unvisited
we call dfs on it, else if all the neighbours are visited or the node does not have any neighbour, we simply add it to 
the stack.
We pop all the elements of the stack and store it in the result list. This sequeunce is the required topological sort.